Создание проекта на React + Typescript + SWC: pnpm create vite
Установка зависимостей: pnpm i
Установка типизации node: pnpm add @types/node -D
Запуск приложения: pnpm run dev
Установка React Router: pnpm i react-router

Перед установкой зависимостей в файле "package.json" можно убрать символ "^" в номерах версий, чтобы версии зависимостей
точно всегда были рабочими.

В проекте используется SWC (Speedy Web Compiler) - быстрый компилятор JavaScript/TypeScript, написанный на Rust. Он
позиционируется как замена Babel и других инструментов сборки.

Настройка импортов/алиасов:
1. В файле "tsconfig.app.json" в раздел "compilerOptions" добавить:
"baseUrl": ".",
"paths": {
    "@/*": ["src/*"]
},
Раздел "baseUrl" устанавливает, что корневая директория проекта будет являться той директорией, относительно которой TS
будет разрешать пути к модулям.
Раздел "paths" позволяет создавать алиасы для директорий. В нашем случае TS будет смотреть что находится в директории
"src" и добавлять для нее символ "@".
2. В файле "vite.config.ts" заменить код на следующий:
import path from 'path'
import {defineConfig} from 'vite'
import react from '@vitejs/plugin-react-swc'

// https://vite.dev/config/
export default defineConfig({
    plugins: [react()],
    resolve: {
        alias: {
            '@/': `${path.resolve(__dirname, 'src')}/`,
        },
    },
})
Разделом "resolve" указываем Vite как понимать правильно пути при сборке приложения.
3. Разрешить импорт "path" и переменной "__dirname" путем установки типизации node: pnpm add @types/node -D
4. Чтобы сократить импорты еще сильнее, можно рядом с экспортируемыми файлами создавать файл "index.ts" для реэкспорта,
например:
export {Routing} from './Routing.tsx'

Для роутинга в этом проекте используется библиотека React Router. Установка React Router: pnpm i react-router

В проекте используется следующая структура директорий:
1. Папка "app" содержит общую настройку приложения и макет, который зависит от остальных папок приложения.
2. Папка "common" содержит универсальные и повторно используемые утилиты и компоненты.
3. Папка "features" содержит папки, содержащие все функциональности имеющие отношение к отдельным фичам. Папка
"features" содержит 5 сегментов:
- ui - UI-компоненты.
- api - взаимодействие с back-end.
- model - бизнес-логика.
- lib - дополнительный библиотечный код.
- config - настройки и конфигурации.

В проекте используются модульные стили.